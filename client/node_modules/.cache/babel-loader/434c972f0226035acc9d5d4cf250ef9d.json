{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nexport default function callApi(endpoint, method = 'get', body) {\n  console.log('body before sending', body);\n  const headers = {\n    'content-type': 'application/json'\n  };\n  const fetchUrl = `/api/${endpoint}`;\n  return fetch(fetchUrl, {\n    headers,\n    method,\n    body: JSON.stringify(body)\n  }).then(response => {\n    return response;\n  }).then(response => response.json().then(json => ({\n    json,\n    response\n  }))).then(({\n    json,\n    response\n  }) => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n\n    return json;\n  }).then(response => response, error => error);\n}","map":{"version":3,"sources":["/Users/cloudkibo/Kibo/miniapp/client/src/global/callApi.js"],"names":["fetch","callApi","endpoint","method","body","console","log","headers","fetchUrl","JSON","stringify","then","response","json","ok","Promise","reject","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,eAAe,SAASC,OAAT,CAAkBC,QAAlB,EAA4BC,MAAM,GAAG,KAArC,EAA4CC,IAA5C,EAAkD;AAC/DC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAnC;AACA,QAAMG,OAAO,GAAG;AAAC,oBAAgB;AAAjB,GAAhB;AACA,QAAMC,QAAQ,GAAI,QAAON,QAAS,EAAlC;AAEA,SAAOF,KAAK,CAACQ,QAAD,EAAW;AACrBD,IAAAA,OADqB;AAErBJ,IAAAA,MAFqB;AAGrBC,IAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHe,GAAX,CAAL,CAIJO,IAJI,CAICC,QAAQ,IAAI;AAClB,WAAOA,QAAP;AACD,GANM,EAMJD,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBE,IAAI,KAAK;AAAEA,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAL,CAAzB,CANb,EAOJD,IAPI,CAOC,CAAC;AAAEE,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAD,KAAwB;AAC5B,QAAI,CAACA,QAAQ,CAACE,EAAd,EAAkB;AAChB,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GAZI,EAaJF,IAbI,CAcHC,QAAQ,IAAIA,QAdT,EAeHK,KAAK,IAAIA,KAfN,CAAP;AAiBD","sourcesContent":["import fetch from 'isomorphic-fetch'\n\nexport default function callApi (endpoint, method = 'get', body) {\n  console.log('body before sending', body)\n  const headers = {'content-type': 'application/json'}\n  const fetchUrl = `/api/${endpoint}`\n\n  return fetch(fetchUrl, {\n    headers,\n    method,\n    body: JSON.stringify(body)\n  }).then(response => {\n    return response\n  }).then(response => response.json().then(json => ({ json, response })))\n    .then(({ json, response }) => {\n      if (!response.ok) {\n        return Promise.reject(json)\n      }\n      return json\n    })\n    .then(\n      response => response,\n      error => error\n    )\n}\n"]},"metadata":{},"sourceType":"module"}