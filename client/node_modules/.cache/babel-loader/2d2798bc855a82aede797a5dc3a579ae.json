{"ast":null,"code":"import io from'socket.io-client';var socket=io('');export function initiateSocket(){socket.connect();}var joined=false;var myId='';var callback;export function registerCallback(cb){callback=cb;}export function joinRoom(data){console.log('Trying to join room socket',data);myId=data;if(joined){return;}socket.emit('message',{action:'join_room',room_id:data});joined=true;}socket.on('connect',function(){console.log('Setting Socket Status to true');if(myId!==''){joinRoom(myId);}});socket.on('disconnect',function(){joined=false;});socket.on('message',function(data){console.log('socket event received',data);callback(data.payload);});","map":{"version":3,"sources":["/Users/cloudkibo/Kibo/miniapp/client/src/socket/index.js"],"names":["io","socket","initiateSocket","connect","joined","myId","callback","registerCallback","cb","joinRoom","data","console","log","emit","action","room_id","on","payload"],"mappings":"AAAA,MAAOA,CAAAA,EAAP,KAAe,kBAAf,CACA,GAAMC,CAAAA,MAAM,CAAGD,EAAE,CAAC,EAAD,CAAjB,CAEA,MAAO,SAASE,CAAAA,cAAT,EAA2B,CAChCD,MAAM,CAACE,OAAP,GACD,CAED,GAAIC,CAAAA,MAAM,CAAG,KAAb,CACA,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAIC,CAAAA,QAAJ,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA2BC,EAA3B,CAA+B,CACpCF,QAAQ,CAAGE,EAAX,CACD,CAED,MAAO,SAASC,CAAAA,QAAT,CAAmBC,IAAnB,CAAyB,CAC9BC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CF,IAA1C,EACAL,IAAI,CAAGK,IAAP,CACA,GAAIN,MAAJ,CAAY,CACV,OACD,CACDH,MAAM,CAACY,IAAP,CAAY,SAAZ,CAAuB,CACrBC,MAAM,CAAE,WADa,CAErBC,OAAO,CAAEL,IAFY,CAAvB,EAIAN,MAAM,CAAG,IAAT,CACD,CAEDH,MAAM,CAACe,EAAP,CAAU,SAAV,CAAqB,UAAM,CACzBL,OAAO,CAACC,GAAR,CAAY,+BAAZ,EACA,GAAIP,IAAI,GAAK,EAAb,CAAiB,CACfI,QAAQ,CAACJ,IAAD,CAAR,CACD,CACF,CALD,EAOAJ,MAAM,CAACe,EAAP,CAAU,YAAV,CAAwB,UAAM,CAC5BZ,MAAM,CAAG,KAAT,CACD,CAFD,EAIAH,MAAM,CAACe,EAAP,CAAU,SAAV,CAAqB,SAACN,IAAD,CAAU,CAC7BC,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAAqCF,IAArC,EACAJ,QAAQ,CAACI,IAAI,CAACO,OAAN,CAAR,CACD,CAHD","sourcesContent":["import io from 'socket.io-client'\nconst socket = io('')\n\nexport function initiateSocket () {\n  socket.connect()\n}\n\nlet joined = false\nlet myId = ''\nlet callback\n\nexport function registerCallback (cb) {\n  callback = cb\n}\n\nexport function joinRoom (data) {\n  console.log('Trying to join room socket', data)\n  myId = data\n  if (joined) {\n    return\n  }\n  socket.emit('message', {\n    action: 'join_room',\n    room_id: data\n  })\n  joined = true\n}\n\nsocket.on('connect', () => {\n  console.log('Setting Socket Status to true')\n  if (myId !== '') {\n    joinRoom(myId)\n  }\n})\n\nsocket.on('disconnect', () => {\n  joined = false\n})\n\nsocket.on('message', (data) => {\n  console.log('socket event received', data)\n  callback(data.payload)\n})\n"]},"metadata":{},"sourceType":"module"}