{"ast":null,"code":"import fetch from'isomorphic-fetch';export default function callApi(endpoint){var method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'get';var body=arguments.length>2?arguments[2]:undefined;console.log('body before sending',body);var headers={'content-type':'application/json'};var fetchUrl=\"/api/\".concat(endpoint);return fetch(fetchUrl,{headers:headers,method:method,body:JSON.stringify(body)}).then(function(response){return response;}).then(function(response){return response.json().then(function(json){return{json:json,response:response};});}).then(function(_ref){var json=_ref.json,response=_ref.response;if(!response.ok){return Promise.reject(json);}return json;}).then(function(response){return response;},function(error){return error;});}","map":{"version":3,"sources":["/Users/cloudkibo/Kibo/miniapp/client/src/global/callApi.js"],"names":["fetch","callApi","endpoint","method","body","console","log","headers","fetchUrl","JSON","stringify","then","response","json","ok","Promise","reject","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,kBAAlB,CAEA,cAAe,SAASC,CAAAA,OAAT,CAAkBC,QAAlB,CAAkD,IAAtBC,CAAAA,MAAsB,2DAAb,KAAa,IAANC,CAAAA,IAAM,2CAC/DC,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmCF,IAAnC,EACA,GAAMG,CAAAA,OAAO,CAAG,CAAC,eAAgB,kBAAjB,CAAhB,CACA,GAAMC,CAAAA,QAAQ,gBAAWN,QAAX,CAAd,CAEA,MAAOF,CAAAA,KAAK,CAACQ,QAAD,CAAW,CACrBD,OAAO,CAAPA,OADqB,CAErBJ,MAAM,CAANA,MAFqB,CAGrBC,IAAI,CAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAHe,CAAX,CAAL,CAIJO,IAJI,CAIC,SAAAC,QAAQ,CAAI,CAClB,MAAOA,CAAAA,QAAP,CACD,CANM,EAMJD,IANI,CAMC,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,SAAAE,IAAI,QAAK,CAAEA,IAAI,CAAJA,IAAF,CAAQD,QAAQ,CAARA,QAAR,CAAL,EAAzB,CAAJ,EANT,EAOJD,IAPI,CAOC,cAAwB,IAArBE,CAAAA,IAAqB,MAArBA,IAAqB,CAAfD,QAAe,MAAfA,QAAe,CAC5B,GAAI,CAACA,QAAQ,CAACE,EAAd,CAAkB,CAChB,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CAZI,EAaJF,IAbI,CAcH,SAAAC,QAAQ,QAAIA,CAAAA,QAAJ,EAdL,CAeH,SAAAK,KAAK,QAAIA,CAAAA,KAAJ,EAfF,CAAP,CAiBD","sourcesContent":["import fetch from 'isomorphic-fetch'\n\nexport default function callApi (endpoint, method = 'get', body) {\n  console.log('body before sending', body)\n  const headers = {'content-type': 'application/json'}\n  const fetchUrl = `/api/${endpoint}`\n\n  return fetch(fetchUrl, {\n    headers,\n    method,\n    body: JSON.stringify(body)\n  }).then(response => {\n    return response\n  }).then(response => response.json().then(json => ({ json, response })))\n    .then(({ json, response }) => {\n      if (!response.ok) {\n        return Promise.reject(json)\n      }\n      return json\n    })\n    .then(\n      response => response,\n      error => error\n    )\n}\n"]},"metadata":{},"sourceType":"module"}